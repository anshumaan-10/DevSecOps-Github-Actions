name: Build and Push Docker Image to GHCR or GAR

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag (optional)'
        required: false
        default: 'latest'  # Default value for the tag if not provided
  workflow_call:
    outputs:
      image-tag:
        description: 'The image tag of the new Docker image'
        value: ${{ jobs.docker.outputs.image-tag }}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: '${{ github.event.repository.name }}'
  IMAGE_ID: 'ghcr.io/${{ github.event.repository.name }}/temp:v01'
  GAR_NAME: 'asia-south1-docker.pkg.dev'
  GAR_REPO_NAME: 'asia-south1-docker-images-multiregion-prod'
  tag: 'default'
  TAG_VERSION: 'default'
  workflow_name: 'gcp-invalid'
  IMAGE_NAME_WITH_TAG: 'default:default'
  PAC_ACTION: 'continue'

jobs:
  validate_branch:
    runs-on: ubuntu-latest
    steps:
      - name: Check Branch
        run: |
          echo "You are using a ${{ github.ref_name }} branch with ${{ github.event_name }} as action"
          if [[ "${{ github.ref_name }}" == 'release' || "${{ github.base_ref }}" == 'release' || "${{ github.ref_name }}" == feature* || "${{ github.base_ref }}" == feature* || "${{ github.ref_name }}" == release* || "${{ github.base_ref }}" == release* || "${{ github.ref_name }}" == bugfix* || "${{ github.base_ref }}" == bugfix* ]]; then
            echo "The branch follows 'release*/feature*/bugfix*' workflows."
            echo "workflow_name=nonprod" >> $GITHUB_ENV
            echo "REGISTRY=ghcr.io" >> $GITHUB_ENV
            echo "PAC_ACTION=continue" >> $GITHUB_ENV
          elif [[ "${{ github.ref_name }}" == 'main' || "${{ github.base_ref }}" == 'main' || "${{ github.ref_name }}" == hotfix* || "${{ github.base_ref }}" == hotfix* ]]; then
            echo "The branch follows 'prod' workflows."
            echo "workflow_name=prod" >> $GITHUB_ENV
            echo "REGISTRY=${GAR_NAME}/${GOOGLE_CLOUD_PROJECT}/${GAR_REPO_NAME}" >> $GITHUB_ENV
            if [[ "${{ github.ref_name }}" == hotfix* || "${{ github.base_ref }}" == hotfix* ]]; then
              echo "PAC_ACTION=continue" >> $GITHUB_ENV
            else
              echo "PAC_ACTION=break" >> $GITHUB_ENV
            fi
            echo "IMAGE_ID=${GAR_NAME}/${GOOGLE_CLOUD_PROJECT}/${GAR_REPO_NAME}/${{ github.event.repository.name }}" >> $GITHUB_ENV
            echo "Imageid is $IMAGE_ID"
          else
            echo "The branch is invalid. Use 'gcp-release' or 'z5-main' as your branch."
            env.workflow_name='Invalid'
            exit 1
          fi
    outputs:
      op_workflow_name: ${{ env.workflow_name }}
      op_registry: ${{ env.REGISTRY }}
      op_pac_action: ${{ env.PAC_ACTION }}

  build-docker-image:
    outputs:
      op_image_url: ${{ steps.main-build.outputs.imageurl }}
    runs-on: ubuntu-latest
    needs: validate_branch
    permissions:
      contents: read
      id-token: write
      packages: write
      actions: read
      security-events: write

    steps:
      # Step 1: Checkout the repository code
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Log into GHCR registry 
        if: needs.validate_branch.outputs.op_workflow_name == 'nonprod' && github.event_name =='push'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log into Google Artifact registry 
        if: needs.validate_branch.outputs.op_workflow_name == 'prod' && github.event_name =='push'
        uses: docker/login-action@v3
        with: 
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build Docker image for NonProd Environment
        id: release-build
        if: needs.validate_branch.outputs.op_workflow_name == 'nonprod'
        run: |
          echo "Build for Nonprod in Progress..."
          pwd
          ls -lart
          docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          echo IMAGE_ID=$IMAGE_ID >> $GITHUB_ENV
          echo VERSION=$VERSION >> $GITHUB_ENV
          export tag=$VERSION-$(TZ='Asia/Calcutta' date "+%Y%m%d.%H%M")
          echo tag=$tag >> $GITHUB_ENV
          export TAG_VERSION=$tag
          export IMAGE_NAME_WITH_TAG="ghcr.io/anshumaan-10/$(basename ${{ github.repository }}):${TAG_VERSION}"

          docker tag $IMAGE_NAME $IMAGE_ID:$tag
          docker images
          echo "IMAGE_NAME_WITH_TAG=$IMAGE_NAME_WITH_TAG" >> $GITHUB_ENV
          echo "imageurl=$IMAGE_NAME_WITH_TAG" >> $GITHUB_OUTPUT
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_OUTPUT
          export IMAGE_NAME="$(basename ${{github.repository}}):$TAG_VERSION"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Build Docker image for Prod Environment
        id: main-build
        if: needs.validate_branch.outputs.op_workflow_name == 'prod'
        run: |
          echo "Build for Prod-Prisma-scan in progress"
          pwd
          ls -lart
          export GOOGLE_CLOUD_PROJECT="avian-voice-433417-d5"
          export GAR_REPO_NAME="asia-south1-docker-images-multiregion-prod"
          export IMAGE_ID=${GAR_NAME}/${GOOGLE_CLOUD_PROJECT}/${GAR_REPO_NAME}/${{ github.event.repository.name }}
        
          docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]') 
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          
          echo "VERSION=$VERSION"
          echo "IMAGE_ID-->$IMAGE_ID"

          export tag=$VERSION-$(TZ='Asia/Calcutta' date "+%Y%m%d.%H%M")
          echo tag=$tag >> $GITHUB_ENV
          export TAG_VERSION=$tag
          export IMAGE_NAME_WITH_TAG="$IMAGE_ID:$TAG_VERSION"
          
          echo "IMAGE_NAME_WITH_TAG-->$IMAGE_NAME_WITH_TAG"

          docker tag $IMAGE_NAME $IMAGE_ID:$TAG_VERSION
          docker images
          echo "IMAGE_NAME_WITH_TAG=$IMAGE_NAME_WITH_TAG" >> $GITHUB_ENV
          echo "imageurl=$IMAGE_NAME_WITH_TAG" >> $GITHUB_OUTPUT
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_OUTPUT
          export IMAGE_NAME="${{ github.event.repository.name }}:$TAG_VERSION"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2.5.0
        with:
          driver-opts: |
            image=moby/buildkit:v0.10.6

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Analyze for critical and high CVEs using docker scout
        id: docker-scout-cves
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ env.IMAGE_NAME_WITH_TAG }}
          only-severities: critical,high
          registry: ghcr.io

      - name: Scan the Docker image with Trivy
        id: trivy-scan
        uses: aquasecurity/trivy-action@v0.4.0
        with:
          image-ref: ${{ env.IMAGE_NAME_WITH_TAG }}
          format: 'json'
          output: 'trivy-results.json'

      - name: Upload Trivy results as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: trivy-results
          path: trivy-results.json

      - name: Push Docker Image to GHCR
        if: needs.validate_branch.outputs.op_workflow_name == 'nonprod'
        run: |
          echo "Pushing image to GitHub Container Registry"
          docker push $IMAGE_ID:$TAG_VERSION

      - name: Push Docker Image to GAR
        if: needs.validate_branch.outputs.op_workflow_name == 'prod'
        run: |
          echo "Pushing image to Google Artifact Registry"
          docker push $IMAGE_ID:$TAG_VERSION
